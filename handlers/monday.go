package handlers

import (
	"context"
	"fmt"

	"github.com/machinebox/graphql"
)

const mondayRootPath = "https://api.monday.com/v2/"

type MondayClient struct {
	Client *graphql.Client
	APIKey string
}

// Generated by https://quicktype.io
type Data struct {
	Boards []Board `json:"boards"`
}

type Board struct {
	Name   string  `json:"name"`
	ID     string  `json:"id"`
	Groups []Group `json:"groups"`
}

type Group struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	Items []Item `json:"items"`
}

type Item struct {
	ID           string        `json:"id"`
	Name         string        `json:"name"`
	UpdatedAt    string        `json:"updated_at"`
	ColumnValues []ColumnValue `json:"column_values"`
}

type ColumnValue struct {
	ID    ID      `json:"id"`
	Text  *string `json:"text"`
	Title Title   `json:"title"`
}

type ID string
type Title string

const (
	DueDateAndTime Title = "Due Date and Time"
	EstimateHours  Title = "Estimate Hours"
	TitlePriority  Title = "Priority"
	TitleStatus    Title = "Status"
)

const (
	DueDateAndTimeFormat string = "2006-01-02 15:04"
)

//

func NewMondayClient(apiKey string) *MondayClient {
	return &MondayClient{
		Client: graphql.NewClient(mondayRootPath),
		APIKey: apiKey,
	}
}

func (m *MondayClient) GetAllItemsInGroupsByBoardId(boardID int) (*Board, error) {
	req := graphql.NewRequest(`
			query getAllItemsInGroupsByBoardId ($boardID: [Int]) {
			boards(ids: $boardID) {
				name
				id
				groups{
				title
				items(limit: 20) {
					id
					name
					updated_at
					column_values {
						id
						text
						title
					}
				}
				}
			}
			}
			`)
	req.Var("boardID", boardID)
	req.Header.Set("Authorization", m.APIKey)
	req.Header.Set("Cache-Control", "no-cache")

	ctx := context.Background()

	var graphqlResponse Data
	if err := m.Client.Run(ctx, req, &graphqlResponse); err != nil {
		return nil, err
	}

	if len(graphqlResponse.Boards) == 0 {
		return nil, fmt.Errorf("a board with id %d does not exist", boardID)
	}

	return &graphqlResponse.Boards[0], nil
}
